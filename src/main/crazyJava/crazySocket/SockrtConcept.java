package main.crazyJava.crazySocket;

/*
    socket概念
 */
public class SockrtConcept {

    /**
     * socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –> 读写write/read –> 关闭close”模式来操作。
     * 为了表示和区分已经打开的文件，UNIX/Linux 会给每个文件分配一个 ID，这个 ID 就是一个整数，被称为文件描述符（File Descriptor）。例如：
     * 通常用 0 来表示标准输入文件（stdin），它对应的硬件设备就是键盘；
     * 通常用 1 来表示标准输出文件（stdout），它对应的硬件设备就是显示器。
     *
     *
     * socket是“open—write/read—close”模式的一种实现
     *
     * 流格式套接字（Stream Sockets）也叫“面向连接的套接字”
     *
     * SOCK_STREAM 是一种可靠的、双向的通信数据流，数据可以准确无误地到达另一台计算机，如果损坏或丢失，可以重新发送。
     *
     * SOCK_STREAM 有以下几个特征：
     数据在传输过程中不会消失；
     数据是按照顺序传输的；
     数据的发送和接收不是同( 流格式套接字的内部有一个缓冲区（也就是字符数组），通过 socket 传输的数据将保存到这个缓冲区。接收端在收到数据后并不一定立即读取，
     只要数据不超过缓冲区的容量，接收端有可能在缓冲区被填满以后一次性地读取，也可能分成好几次读取 )

     UDP协议 - 数据报格式套接字（SOCK_DGRAM）无连接套接字
     计算机只管传输数据，不作数据校验，如果数据在传输中损坏，或者没有到达另一台计算机，是没有办法补救的。也就是说，数据错了就错了，无法重传。

     可以将 SOCK_DGRAM 比喻成高速移动的摩托车快递，它有以下特征：
     强调快速传输而非传输顺序；
     传输的数据可能丢失也可能损毁；
     限制每次传输的数据大小；
     数据的发送和接收是同步的

     数据包的传输路径是路由器根据算法来计算出来的


     OSI 模型把网络通信的工作分为 7 层，从下到上分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。

     TCP/IP 模型 简化了OSI 模型  分为4层 是             接口层、      网络层、传输层和    应用层

     IP 地址只能定位到一个局域网  局域网内的计算机定位需要用到MAC地址  什么是MAC地址 MAC地址就是网卡标识 网卡的标识都是独一无二的

     *
     */
}
